{
  "address": "0xf3DCe422190Ca931A510eF3057Aea6FA25f53aDf",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "sint",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addToMargin",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addToPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "base",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseValue",
          "type": "uint256"
        }
      ],
      "name": "baseDiv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseValue",
          "type": "uint256"
        }
      ],
      "name": "baseDivMul",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseValue",
          "type": "uint256"
        }
      ],
      "name": "baseMul",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseValue",
          "type": "uint256"
        }
      ],
      "name": "baseMulRoundUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseValue",
          "type": "uint256"
        }
      ],
      "name": "baseReciprocal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "name": "copy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "getFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "getFractionRoundUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "name": "getMargin",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "getPositiveAndNegativeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "load",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "max",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "nonReentrant1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "nonReentrant2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signatureBytes",
          "type": "bytes"
        }
      ],
      "name": "recover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "newMargin",
          "type": "tuple"
        }
      ],
      "name": "setMargin",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "newPosition",
          "type": "tuple"
        }
      ],
      "name": "setPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "augend",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "addend",
          "type": "tuple"
        }
      ],
      "name": "signedAdd",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "minuend",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "subtrahend",
          "type": "tuple"
        }
      ],
      "name": "signedSub",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "value",
          "type": "bytes32"
        }
      ],
      "name": "store",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "sint",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "sub",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPositive",
              "type": "bool"
            }
          ],
          "internalType": "struct SignedMath.Int",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "subFromMargin",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "balance",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "subFromPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "marginIsPositive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "positionIsPositive",
              "type": "bool"
            },
            {
              "internalType": "uint120",
              "name": "margin",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "position",
              "type": "uint120"
            }
          ],
          "internalType": "struct P1Types.Balance",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bool",
          "name": "must",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "requireReason",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "that",
      "outputs": [],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "toUint120",
      "outputs": [
        {
          "internalType": "uint120",
          "name": "",
          "type": "uint120"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "toUint128",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "toUint32",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6064f9e726412d07787473ae345cf92d6b3cfd9b1f5d6a92eac8c70c0556b7a",
  "receipt": {
    "to": null,
    "from": "0x4962E92A79e26ce75Da38Ddb2F2aa5f46C83e522",
    "contractAddress": "0xf3DCe422190Ca931A510eF3057Aea6FA25f53aDf",
    "transactionIndex": 2,
    "gasUsed": "2385711",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf7eef49b0585643a26957825a866c72ca771d67db7cb664b072320b13d84457c",
    "transactionHash": "0xe6064f9e726412d07787473ae345cf92d6b3cfd9b1f5d6a92eac8c70c0556b7a",
    "logs": [],
    "blockNumber": 25656912,
    "cumulativeGasUsed": "2833132",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d8a4bed0d8259721c6e731840c9f1c4e",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"sint\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToMargin\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseValue\",\"type\":\"uint256\"}],\"name\":\"baseDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseValue\",\"type\":\"uint256\"}],\"name\":\"baseDivMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseValue\",\"type\":\"uint256\"}],\"name\":\"baseMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseValue\",\"type\":\"uint256\"}],\"name\":\"baseMulRoundUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseValue\",\"type\":\"uint256\"}],\"name\":\"baseReciprocal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"name\":\"copy\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"getFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"getFractionRoundUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"name\":\"getMargin\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getPositiveAndNegativeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"load\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nonReentrant1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nonReentrant2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"newMargin\",\"type\":\"tuple\"}],\"name\":\"setMargin\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"newPosition\",\"type\":\"tuple\"}],\"name\":\"setPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"augend\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"addend\",\"type\":\"tuple\"}],\"name\":\"signedAdd\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"minuend\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"subtrahend\",\"type\":\"tuple\"}],\"name\":\"signedSub\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"store\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"sint\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"internalType\":\"struct SignedMath.Int\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subFromMargin\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subFromPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"marginIsPositive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionIsPositive\",\"type\":\"bool\"},{\"internalType\":\"uint120\",\"name\":\"margin\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"position\",\"type\":\"uint120\"}],\"internalType\":\"struct P1Types.Balance\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"must\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"requireReason\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"that\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toUint120\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toUint128\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"axor\",\"methods\":{},\"title\":\"Test_Lib\"},\"userdoc\":{\"methods\":{},\"notice\":\"Exposes library functions for testing.\"}},\"settings\":{\"compilationTarget\":{\"contracts/test/Test_Lib.sol\":\"Test_Lib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"contracts/protocol/lib/BaseMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title BaseMath\\n * @author axor\\n *\\n * @dev Arithmetic for fixed-point numbers with 18 decimals of precision.\\n */\\nlibrary BaseMath {\\n    using SafeMath for uint256;\\n\\n    // The number One in the BaseMath system.\\n    uint256 constant internal BASE = 10 ** 18;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function base()\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return BASE;\\n    }\\n\\n    /**\\n     * @dev Multiplies a value by a base value (result is rounded down).\\n     */\\n    function baseMul(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return value.mul(baseValue).div(BASE);\\n    }\\n\\n    /**\\n     * @dev Multiplies a value by a base value (result is rounded down).\\n     *  Intended as an alternaltive to baseMul to prevent overflow, when `value` is known\\n     *  to be divisible by `BASE`.\\n     */\\n    function baseDivMul(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return value.div(BASE).mul(baseValue);\\n    }\\n\\n    /**\\n     * @dev Multiplies a value by a base value (result is rounded up).\\n     */\\n    function baseMulRoundUp(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (value == 0 || baseValue == 0) {\\n            return 0;\\n        }\\n        return value.mul(baseValue).sub(1).div(BASE).add(1);\\n    }\\n\\n    /**\\n     * @dev Divide a value by a base value (result is rounded down).\\n     */\\n    function baseDiv(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return value.mul(BASE).div(baseValue);\\n    }\\n\\n    /**\\n     * @dev Returns a base value representing the reciprocal of another base value (result is\\n     *  rounded down).\\n     */\\n    function baseReciprocal(\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return baseDiv(BASE, baseValue);\\n    }\\n}\\n\",\"keccak256\":\"0x67144b777ef4e8feaa770a74ea879ead4e3d94da4cfdc795440033fbc9e6397a\"},\"contracts/protocol/lib/Math.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Math\\n * @author axor\\n *\\n * @dev Library for non-standard Math functions.\\n */\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /**\\n     * @dev Return target * (numerator / denominator), rounded down.\\n     */\\n    function getFraction(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    /**\\n     * @dev Return target * (numerator / denominator), rounded up.\\n     */\\n    function getFractionRoundUp(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (target == 0 || numerator == 0) {\\n            // SafeMath will check for zero denominator\\n            return SafeMath.div(0, denominator);\\n        }\\n        return target.mul(numerator).sub(1).div(denominator).add(1);\\n    }\\n\\n    /**\\n     * @dev Returns the minimum between a and b.\\n     */\\n    function min(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the maximum between a and b.\\n     */\\n    function max(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xd1792d2ed771f4b8cc6819e80153c300d054e593d1d2bb71fabec5231150b437\"},\"contracts/protocol/lib/ReentrancyGuard.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title ReentrancyGuard\\n * @author axor\\n *\\n * @dev Updated ReentrancyGuard library designed to be used with Proxy Contracts.\\n */\\ncontract ReentrancyGuard {\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = uint256(int256(-1));\\n\\n    uint256 private _STATUS_;\\n\\n    constructor () internal {\\n        _STATUS_ = NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(_STATUS_ != ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _STATUS_ = ENTERED;\\n        _;\\n        _STATUS_ = NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xcb35b6a4c4843d1d725a78ac01dbaa62f54ccb4afa742eb5a19c360eacd1f71f\"},\"contracts/protocol/lib/Require.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Require\\n * @author axor\\n *\\n * @dev Stringifies parameters to pretty-print revert messages.\\n */\\nlibrary Require {\\n\\n    // ============ Constants ============\\n\\n    uint256 constant ASCII_ZERO = 0x30; // '0'\\n    uint256 constant ASCII_RELATIVE_ZERO = 0x57; // 'a' - 10\\n    uint256 constant FOUR_BIT_MASK = 0xf;\\n    bytes23 constant ZERO_ADDRESS =\\n    0x3a20307830303030303030302e2e2e3030303030303030; // \\\": 0x00000000...00000000\\\"\\n\\n    // ============ Library Functions ============\\n\\n    /**\\n     * @dev If the must condition is not true, reverts using a string combination of the reason and\\n     *  the address.\\n     */\\n    function that(\\n        bool must,\\n        string memory reason,\\n        address addr\\n    )\\n        internal\\n        pure\\n    {\\n        if (!must) {\\n            revert(string(abi.encodePacked(reason, stringify(addr))));\\n        }\\n    }\\n\\n    // ============ Helper Functions ============\\n\\n    /**\\n     * @dev Returns a bytes array that is an ASCII string representation of the input address.\\n     *  Returns \\\" 0x\\\", the first 4 bytes of the address in lowercase hex, \\\"...\\\", then the last 4\\n     *  bytes of the address in lowercase hex.\\n     */\\n    function stringify(\\n        address input\\n    )\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        // begin with \\\": 0x00000000...00000000\\\"\\n        bytes memory result = abi.encodePacked(ZERO_ADDRESS);\\n\\n        // initialize values\\n        uint256 z = uint256(input);\\n        uint256 shift1 = 8 * 20 - 4;\\n        uint256 shift2 = 8 * 4 - 4;\\n\\n        // populate both sections in parallel\\n        for (uint256 i = 4; i < 12; i++) {\\n            result[i] = char(z >> shift1); // set char in first section\\n            result[i + 11] = char(z >> shift2); // set char in second section\\n            shift1 -= 4;\\n            shift2 -= 4;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the ASCII hex character representing the last four bits of the input (0-9a-f).\\n     */\\n    function char(\\n        uint256 input\\n    )\\n        private\\n        pure\\n        returns (byte)\\n    {\\n        uint256 b = input & FOUR_BIT_MASK;\\n        return byte(uint8(b + ((b < 10) ? ASCII_ZERO : ASCII_RELATIVE_ZERO)));\\n    }\\n}\\n\",\"keccak256\":\"0x6bc2335a9a690ee9e6eb17947b4571fa4f13db52008be56ee7979b0cc33c1a65\"},\"contracts/protocol/lib/SafeCast.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title SafeCast\\n * @author axor\\n *\\n * @dev Library for casting uint256 to other types of uint.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     *  overflow (i.e. when the input is greater than largest uint128).\\n     *\\n     *  Counterpart to Solidity's `uint128` operator.\\n     *\\n     *  Requirements:\\n     *  - `value` must fit into 128 bits.\\n     */\\n    function toUint128(\\n        uint256 value\\n    )\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     *  overflow (i.e. when the input is greater than largest uint120).\\n     *\\n     *  Counterpart to Solidity's `uint120` operator.\\n     *\\n     *  Requirements:\\n     *  - `value` must fit into 120 bits.\\n     */\\n    function toUint120(\\n        uint256 value\\n    )\\n        internal\\n        pure\\n        returns (uint120)\\n    {\\n        require(value < 2**120, \\\"SafeCast: value doesn\\\\'t fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     *  overflow (i.e. when the input is greater than largest uint32).\\n     *\\n     *  Counterpart to Solidity's `uint32` operator.\\n     *\\n     *  Requirements:\\n     *  - `value` must fit into 32 bits.\\n     */\\n    function toUint32(\\n        uint256 value\\n    )\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n}\\n\",\"keccak256\":\"0x3bd9c5bf7064d518ddd24043b185fc85b9d8f8fab471fd2a98bfd48ef8f257ca\"},\"contracts/protocol/lib/SignedMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title SignedMath\\n * @author axor\\n *\\n * @dev SignedMath library for doing math with signed integers.\\n */\\nlibrary SignedMath {\\n    using SafeMath for uint256;\\n\\n    // ============ Structs ============\\n\\n    struct Int {\\n        uint256 value;\\n        bool isPositive;\\n    }\\n\\n    // ============ Functions ============\\n\\n    /**\\n     * @dev Returns a new signed integer equal to a signed integer plus an unsigned integer.\\n     */\\n    function add(\\n        Int memory sint,\\n        uint256 value\\n    )\\n        internal\\n        pure\\n        returns (Int memory)\\n    {\\n        if (sint.isPositive) {\\n            return Int({\\n                value: value.add(sint.value),\\n                isPositive: true\\n            });\\n        }\\n        if (sint.value < value) {\\n            return Int({\\n                value: value.sub(sint.value),\\n                isPositive: true\\n            });\\n        }\\n        return Int({\\n            value: sint.value.sub(value),\\n            isPositive: false\\n        });\\n    }\\n\\n    /**\\n     * @dev Returns a new signed integer equal to a signed integer minus an unsigned integer.\\n     */\\n    function sub(\\n        Int memory sint,\\n        uint256 value\\n    )\\n        internal\\n        pure\\n        returns (Int memory)\\n    {\\n        if (!sint.isPositive) {\\n            return Int({\\n                value: value.add(sint.value),\\n                isPositive: false\\n            });\\n        }\\n        if (sint.value > value) {\\n            return Int({\\n                value: sint.value.sub(value),\\n                isPositive: true\\n            });\\n        }\\n        return Int({\\n            value: value.sub(sint.value),\\n            isPositive: false\\n        });\\n    }\\n\\n    /**\\n     * @dev Returns a new signed integer equal to a signed integer plus another signed integer.\\n     */\\n    function signedAdd(\\n        Int memory augend,\\n        Int memory addend\\n    )\\n        internal\\n        pure\\n        returns (Int memory)\\n    {\\n        return addend.isPositive\\n            ? add(augend, addend.value)\\n            : sub(augend, addend.value);\\n    }\\n\\n    /**\\n     * @dev Returns a new signed integer equal to a signed integer minus another signed integer.\\n     */\\n    function signedSub(\\n        Int memory minuend,\\n        Int memory subtrahend\\n    )\\n        internal\\n        pure\\n        returns (Int memory)\\n    {\\n        return subtrahend.isPositive\\n            ? sub(minuend, subtrahend.value)\\n            : add(minuend, subtrahend.value);\\n    }\\n\\n    /**\\n     * @dev Returns true if signed integer `a` is greater than signed integer `b`, false otherwise.\\n     */\\n    function gt(\\n        Int memory a,\\n        Int memory b\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (a.isPositive) {\\n            if (b.isPositive) {\\n                return a.value > b.value;\\n            } else {\\n                // True, unless both values are zero.\\n                return a.value != 0 || b.value != 0;\\n            }\\n        } else {\\n            if (b.isPositive) {\\n                return false;\\n            } else {\\n                return a.value < b.value;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the minimum of signed integers `a` and `b`.\\n     */\\n    function min(\\n        Int memory a,\\n        Int memory b\\n    )\\n        internal\\n        pure\\n        returns (Int memory)\\n    {\\n        return gt(b, a) ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the maximum of signed integers `a` and `b`.\\n     */\\n    function max(\\n        Int memory a,\\n        Int memory b\\n    )\\n        internal\\n        pure\\n        returns (Int memory)\\n    {\\n        return gt(a, b) ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x2705b897ceef62db3ec301707f4667a4332318b571101c6a554b80243951361c\"},\"contracts/protocol/lib/Storage.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Storage\\n * @author axor\\n *\\n * @dev Storage library for reading/writing storage at a low level.\\n */\\nlibrary Storage {\\n\\n    /**\\n     * @dev Performs an SLOAD and returns the data in the slot.\\n     */\\n    function load(\\n        bytes32 slot\\n    )\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 result;\\n        /* solium-disable-next-line security/no-inline-assembly */\\n        assembly {\\n            result := sload(slot)\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs an SSTORE to save the value to the slot.\\n     */\\n    function store(\\n        bytes32 slot,\\n        bytes32 value\\n    )\\n        internal\\n    {\\n        /* solium-disable-next-line security/no-inline-assembly */\\n        assembly {\\n            sstore(slot, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6389d1142b8c4c4760a656f04263e2735d9e5ae0f127dae662e98db6e2fc66a\"},\"contracts/protocol/lib/TypedSignature.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title TypedSignature\\n * @author axor\\n *\\n * @dev Library to unparse typed signatures.\\n */\\nlibrary TypedSignature {\\n\\n    // ============ Constants ============\\n\\n    bytes32 constant private FILE = \\\"TypedSignature\\\";\\n\\n    // Prepended message with the length of the signed hash in decimal.\\n    bytes constant private PREPEND_DEC = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n\\n    // Prepended message with the length of the signed hash in hexadecimal.\\n    bytes constant private PREPEND_HEX = \\\"\\\\x19Ethereum Signed Message:\\\\n\\\\x20\\\";\\n\\n    // Number of bytes in a typed signature.\\n    uint256 constant private NUM_SIGNATURE_BYTES = 66;\\n\\n    // ============ Enums ============\\n\\n    // Different RPC providers may implement signing methods differently, so we allow different\\n    // signature types depending on the string prepended to a hash before it was signed.\\n    enum SignatureType {\\n        NoPrepend,   // No string was prepended.\\n        Decimal,     // PREPEND_DEC was prepended.\\n        Hexadecimal, // PREPEND_HEX was prepended.\\n        Invalid      // Not a valid type. Used for bound-checking.\\n    }\\n\\n    // ============ Structs ============\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        bytes2 vType;\\n    }\\n\\n    // ============ Functions ============\\n\\n    /**\\n     * @dev Gives the address of the signer of a hash. Also allows for the commonly prepended string\\n     *  of '\\\\x19Ethereum Signed Message:\\\\n' + message.length\\n     *\\n     * @param  hash       Hash that was signed (does not include prepended message).\\n     * @param  signature  Type and ECDSA signature with structure: {32:r}{32:s}{1:v}{1:type}\\n     * @return            Address of the signer of the hash.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        SignatureType sigType = SignatureType(uint8(bytes1(signature.vType << 8)));\\n\\n        bytes32 signedHash;\\n        if (sigType == SignatureType.NoPrepend) {\\n            signedHash = hash;\\n        } else if (sigType == SignatureType.Decimal) {\\n            signedHash = keccak256(abi.encodePacked(PREPEND_DEC, hash));\\n        } else {\\n            assert(sigType == SignatureType.Hexadecimal);\\n            signedHash = keccak256(abi.encodePacked(PREPEND_HEX, hash));\\n        }\\n\\n        return ecrecover(\\n            signedHash,\\n            uint8(bytes1(signature.vType)),\\n            signature.r,\\n            signature.s\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6acfe66ec0ccb5c539a9d3d13bc9ff92a91bfc7db93a58b18043a86ffc16ab44\"},\"contracts/protocol/v1/lib/P1BalanceMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { P1Types } from \\\"./P1Types.sol\\\";\\nimport { BaseMath } from \\\"../../lib/BaseMath.sol\\\";\\nimport { SafeCast } from \\\"../../lib/SafeCast.sol\\\";\\nimport { SignedMath } from \\\"../../lib/SignedMath.sol\\\";\\n\\n\\n/**\\n * @title P1BalanceMath\\n * @author axor\\n *\\n * @dev Library for manipulating P1Types.Balance structs.\\n */\\nlibrary P1BalanceMath {\\n    using BaseMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedMath for SignedMath.Int;\\n    using P1BalanceMath for P1Types.Balance;\\n\\n    // ============ Constants ============\\n\\n    uint256 private constant FLAG_MARGIN_IS_POSITIVE = 1 << (8 * 31);\\n    uint256 private constant FLAG_POSITION_IS_POSITIVE = 1 << (8 * 15);\\n\\n    // ============ Functions ============\\n\\n    /**\\n     * @dev Create a copy of the balance struct.\\n     */\\n    function copy(\\n        P1Types.Balance memory balance\\n    )\\n        internal\\n        pure\\n        returns (P1Types.Balance memory)\\n    {\\n        return P1Types.Balance({\\n            marginIsPositive: balance.marginIsPositive,\\n            positionIsPositive: balance.positionIsPositive,\\n            margin: balance.margin,\\n            position: balance.position\\n        });\\n    }\\n\\n    /**\\n     * @dev In-place add amount to balance.margin.\\n     */\\n    function addToMargin(\\n        P1Types.Balance memory balance,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n    {\\n        SignedMath.Int memory signedMargin = balance.getMargin();\\n        signedMargin = signedMargin.add(amount);\\n        balance.setMargin(signedMargin);\\n    }\\n\\n    /**\\n     * @dev In-place subtract amount from balance.margin.\\n     */\\n    function subFromMargin(\\n        P1Types.Balance memory balance,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n    {\\n        SignedMath.Int memory signedMargin = balance.getMargin();\\n        signedMargin = signedMargin.sub(amount);\\n        balance.setMargin(signedMargin);\\n    }\\n\\n    /**\\n     * @dev In-place add amount to balance.position.\\n     */\\n    function addToPosition(\\n        P1Types.Balance memory balance,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n    {\\n        SignedMath.Int memory signedPosition = balance.getPosition();\\n        signedPosition = signedPosition.add(amount);\\n        balance.setPosition(signedPosition);\\n    }\\n\\n    /**\\n     * @dev In-place subtract amount from balance.position.\\n     */\\n    function subFromPosition(\\n        P1Types.Balance memory balance,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n    {\\n        SignedMath.Int memory signedPosition = balance.getPosition();\\n        signedPosition = signedPosition.sub(amount);\\n        balance.setPosition(signedPosition);\\n    }\\n\\n    /**\\n     * @dev Returns the positive and negative values of the margin and position together, given a\\n     *  price, which is used as a conversion rate between the two currencies.\\n     *\\n     *  No rounding occurs here--the returned values are \\\"base values\\\" with extra precision.\\n     */\\n    function getPositiveAndNegativeValue(\\n        P1Types.Balance memory balance,\\n        uint256 price\\n    )\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 positiveValue = 0;\\n        uint256 negativeValue = 0;\\n\\n        // add value of margin\\n        if (balance.marginIsPositive) {\\n            positiveValue = uint256(balance.margin).mul(BaseMath.base());\\n        } else {\\n            negativeValue = uint256(balance.margin).mul(BaseMath.base());\\n        }\\n\\n        // add value of position\\n        uint256 positionValue = uint256(balance.position).mul(price);\\n        if (balance.positionIsPositive) {\\n            positiveValue = positiveValue.add(positionValue);\\n        } else {\\n            negativeValue = negativeValue.add(positionValue);\\n        }\\n\\n        return (positiveValue, negativeValue);\\n    }\\n\\n    /**\\n     * @dev Returns a compressed bytes32 representation of the balance for logging.\\n     */\\n    function toBytes32(\\n        P1Types.Balance memory balance\\n    )\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        uint256 result =\\n            uint256(balance.position)\\n            | (uint256(balance.margin) << 128)\\n            | (balance.marginIsPositive ? FLAG_MARGIN_IS_POSITIVE : 0)\\n            | (balance.positionIsPositive ? FLAG_POSITION_IS_POSITIVE : 0);\\n        return bytes32(result);\\n    }\\n\\n    // ============ Helper Functions ============\\n\\n    /**\\n     * @dev Returns a SignedMath.Int version of the margin in balance.\\n     */\\n    function getMargin(\\n        P1Types.Balance memory balance\\n    )\\n        internal\\n        pure\\n        returns (SignedMath.Int memory)\\n    {\\n        return SignedMath.Int({\\n            value: balance.margin,\\n            isPositive: balance.marginIsPositive\\n        });\\n    }\\n\\n    /**\\n     * @dev Returns a SignedMath.Int version of the position in balance.\\n     */\\n    function getPosition(\\n        P1Types.Balance memory balance\\n    )\\n        internal\\n        pure\\n        returns (SignedMath.Int memory)\\n    {\\n        return SignedMath.Int({\\n            value: balance.position,\\n            isPositive: balance.positionIsPositive\\n        });\\n    }\\n\\n    /**\\n     * @dev In-place modify the signed margin value of a balance.\\n     */\\n    function setMargin(\\n        P1Types.Balance memory balance,\\n        SignedMath.Int memory newMargin\\n    )\\n        internal\\n        pure\\n    {\\n        balance.margin = newMargin.value.toUint120();\\n        balance.marginIsPositive = newMargin.isPositive;\\n    }\\n\\n    /**\\n     * @dev In-place modify the signed position value of a balance.\\n     */\\n    function setPosition(\\n        P1Types.Balance memory balance,\\n        SignedMath.Int memory newPosition\\n    )\\n        internal\\n        pure\\n    {\\n        balance.position = newPosition.value.toUint120();\\n        balance.positionIsPositive = newPosition.isPositive;\\n    }\\n}\\n\",\"keccak256\":\"0x75f98cc4f959264e97155896ae230cda97f27b0f460f0b2d6aaac3c4b71e1c84\"},\"contracts/protocol/v1/lib/P1Types.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title P1Types\\n * @author axor\\n *\\n * @dev Library for common types used in PerpetualV1 contracts.\\n */\\nlibrary P1Types {\\n    // ============ Structs ============\\n\\n    /**\\n     * @dev Used to represent the global index and each account's cached index.\\n     *  Used to settle funding paymennts on a per-account basis.\\n     */\\n    struct Index {\\n        uint32 timestamp;\\n        bool isPositive;\\n        uint128 value;\\n    }\\n\\n    /**\\n     * @dev Used to track the signed margin balance and position balance values for each account.\\n     */\\n    struct Balance {\\n        bool marginIsPositive;\\n        bool positionIsPositive;\\n        uint120 margin;\\n        uint120 position;\\n    }\\n\\n    /**\\n     * @dev Used to cache commonly-used variables that are relatively gas-intensive to obtain.\\n     */\\n    struct Context {\\n        uint256 price;\\n        uint256 minCollateral;\\n        Index index;\\n    }\\n\\n    /**\\n     * @dev Used by contracts implementing the I_P1Trader interface to return the result of a trade.\\n     */\\n    struct TradeResult {\\n        uint256 marginAmount;\\n        uint256 positionAmount;\\n        bool isBuy; // From taker's perspective.\\n        bytes32 traderFlags;\\n    }\\n}\\n\",\"keccak256\":\"0x31f6c089ca233eff543e6587d4e6e159e1ccf5d3b4ec14552d18d1cfb360d18e\"},\"contracts/test/Test_Lib.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { BaseMath } from \\\"../protocol/lib/BaseMath.sol\\\";\\nimport { Math } from \\\"../protocol/lib/Math.sol\\\";\\nimport { ReentrancyGuard } from \\\"../protocol/lib/ReentrancyGuard.sol\\\";\\nimport { Require } from \\\"../protocol/lib/Require.sol\\\";\\nimport { SafeCast } from \\\"../protocol/lib/SafeCast.sol\\\";\\nimport { SignedMath } from \\\"../protocol/lib/SignedMath.sol\\\";\\nimport { Storage } from \\\"../protocol/lib/Storage.sol\\\";\\nimport { TypedSignature } from \\\"../protocol/lib/TypedSignature.sol\\\";\\nimport { P1BalanceMath } from \\\"../protocol/v1/lib/P1BalanceMath.sol\\\";\\nimport { P1Types } from \\\"../protocol/v1/lib/P1Types.sol\\\";\\n\\n\\n/**\\n * @title Test_Lib\\n * @author axor\\n *\\n * @notice Exposes library functions for testing.\\n */\\n/* solium-disable-next-line camelcase */\\ncontract Test_Lib is\\n    ReentrancyGuard\\n{\\n\\n    // ============ BaseMath.sol ============\\n\\n    function base()\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return BaseMath.base();\\n    }\\n\\n    function baseMul(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return BaseMath.baseMul(value, baseValue);\\n    }\\n\\n    function baseDivMul(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return BaseMath.baseDivMul(value, baseValue);\\n    }\\n\\n    function baseMulRoundUp(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return BaseMath.baseMulRoundUp(value, baseValue);\\n    }\\n\\n    function baseDiv(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return BaseMath.baseDiv(value, baseValue);\\n    }\\n\\n    function baseReciprocal(\\n        uint256 baseValue\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return BaseMath.baseReciprocal(baseValue);\\n    }\\n\\n    // ============ Math.sol ============\\n\\n    function getFraction(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getFraction(target, numerator, denominator);\\n    }\\n\\n    function getFractionRoundUp(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getFractionRoundUp(target, numerator, denominator);\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.min(a, b);\\n    }\\n\\n    function max(\\n        uint256 a,\\n        uint256 b\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.max(a, b);\\n    }\\n\\n    // ============ Require.sol ============\\n\\n    function that(\\n        bool must,\\n        string calldata requireReason,\\n        address addr\\n    )\\n        external\\n        pure\\n    {\\n        Require.that(\\n            must,\\n            requireReason,\\n            addr\\n        );\\n    }\\n\\n    // ============ SafeCast.sol ============\\n\\n    function toUint128(\\n        uint256 value\\n    )\\n        external\\n        pure\\n        returns (uint128)\\n    {\\n        return SafeCast.toUint128(value);\\n    }\\n\\n    function toUint120(\\n        uint256 value\\n    )\\n        external\\n        pure\\n        returns (uint120)\\n    {\\n        return SafeCast.toUint120(value);\\n    }\\n\\n    function toUint32(\\n        uint256 value\\n    )\\n        external\\n        pure\\n        returns (uint32)\\n    {\\n        return SafeCast.toUint32(value);\\n    }\\n\\n    // ============ SignedMath.sol ============\\n\\n    function add(\\n        SignedMath.Int calldata sint,\\n        uint256 value\\n    )\\n        external\\n        pure\\n        returns (SignedMath.Int memory)\\n    {\\n        return SignedMath.add(sint, value);\\n    }\\n\\n    function sub(\\n        SignedMath.Int calldata sint,\\n        uint256 value\\n    )\\n        external\\n        pure\\n        returns (SignedMath.Int memory)\\n    {\\n        return SignedMath.sub(sint, value);\\n    }\\n\\n    function signedAdd(\\n        SignedMath.Int calldata augend,\\n        SignedMath.Int calldata addend\\n    )\\n        external\\n        pure\\n        returns (SignedMath.Int memory)\\n    {\\n        return SignedMath.signedAdd(augend, addend);\\n    }\\n\\n    function signedSub(\\n        SignedMath.Int calldata minuend,\\n        SignedMath.Int calldata subtrahend\\n    )\\n        external\\n        pure\\n        returns (SignedMath.Int memory)\\n    {\\n        return SignedMath.signedSub(minuend, subtrahend);\\n    }\\n\\n    // ============ Storage.sol ============\\n\\n    function load(\\n        bytes32 slot\\n    )\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return Storage.load(slot);\\n    }\\n\\n    function store(\\n        bytes32 slot,\\n        bytes32 value\\n    )\\n        external\\n    {\\n        Storage.store(slot, value);\\n    }\\n\\n    // ============ TypedSignature.sol ============\\n\\n    function recover(\\n        bytes32 hash,\\n        bytes calldata signatureBytes\\n    )\\n        external\\n        pure\\n        returns (address)\\n    {\\n        TypedSignature.Signature memory signature = abi.decode(\\n            signatureBytes,\\n            (TypedSignature.Signature)\\n        );\\n        return TypedSignature.recover(hash, signature);\\n    }\\n\\n    // ============ P1BalanceMath.sol ============\\n\\n    function copy(\\n        P1Types.Balance calldata balance\\n    )\\n        external\\n        pure\\n        returns (P1Types.Balance memory)\\n    {\\n        return P1BalanceMath.copy(balance);\\n    }\\n\\n    function addToMargin(\\n        P1Types.Balance calldata balance,\\n        uint256 amount\\n    )\\n        external\\n        pure\\n        returns (P1Types.Balance memory)\\n    {\\n        // Copy to memory, modify in place, and return the memory object.\\n        P1Types.Balance memory _balance = balance;\\n        P1BalanceMath.addToMargin(_balance, amount);\\n        return _balance;\\n    }\\n\\n    function subFromMargin(\\n        P1Types.Balance calldata balance,\\n        uint256 amount\\n    )\\n        external\\n        pure\\n        returns (P1Types.Balance memory)\\n    {\\n        // Copy to memory, modify in place, and return the memory object.\\n        P1Types.Balance memory _balance = balance;\\n        P1BalanceMath.subFromMargin(_balance, amount);\\n        return _balance;\\n    }\\n\\n    function addToPosition(\\n        P1Types.Balance calldata balance,\\n        uint256 amount\\n    )\\n        external\\n        pure\\n        returns (P1Types.Balance memory)\\n    {\\n        // Copy to memory, modify in place, and return the memory object.\\n        P1Types.Balance memory _balance = balance;\\n        P1BalanceMath.addToPosition(_balance, amount);\\n        return _balance;\\n    }\\n\\n    function subFromPosition(\\n        P1Types.Balance calldata balance,\\n        uint256 amount\\n    )\\n        external\\n        pure\\n        returns (P1Types.Balance memory)\\n    {\\n        // Copy to memory, modify in place, and return the memory object.\\n        P1Types.Balance memory _balance = balance;\\n        P1BalanceMath.subFromPosition(_balance, amount);\\n        return _balance;\\n    }\\n\\n    function getPositiveAndNegativeValue(\\n        P1Types.Balance calldata balance,\\n        uint256 price\\n    )\\n        external\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        return P1BalanceMath.getPositiveAndNegativeValue(balance, price);\\n    }\\n\\n    function getMargin(\\n        P1Types.Balance calldata balance\\n    )\\n        external\\n        pure\\n        returns (SignedMath.Int memory)\\n    {\\n        return P1BalanceMath.getMargin(balance);\\n    }\\n\\n    function getPosition(\\n        P1Types.Balance calldata balance\\n    )\\n        external\\n        pure\\n        returns (SignedMath.Int memory)\\n    {\\n        return P1BalanceMath.getPosition(balance);\\n    }\\n\\n    function setMargin(\\n        P1Types.Balance calldata balance,\\n        SignedMath.Int calldata newMargin\\n    )\\n        external\\n        pure\\n        returns (P1Types.Balance memory)\\n    {\\n        // Copy to memory, modify in place, and return the memory object.\\n        P1Types.Balance memory _balance = balance;\\n        P1BalanceMath.setMargin(_balance, newMargin);\\n        return _balance;\\n    }\\n\\n    function setPosition(\\n        P1Types.Balance calldata balance,\\n        SignedMath.Int calldata newPosition\\n    )\\n        external\\n        pure\\n        returns (P1Types.Balance memory)\\n    {\\n        // Copy to memory, modify in place, and return the memory object.\\n        P1Types.Balance memory _balance = balance;\\n        P1BalanceMath.setPosition(_balance, newPosition);\\n        return _balance;\\n    }\\n\\n    // ============ ReentrancyGuard.sol ============\\n\\n    function nonReentrant1()\\n        public\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        return this.nonReentrant2();\\n    }\\n\\n    function nonReentrant2()\\n        public\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x44547c56bc8919428b3a937709da5df9b8fe27d60b01be183105e9880d72fa13\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020b5760003560e01c80637dc1e49a1161012a578063c8193255116100bd578063d46b4aff1161008c578063ded7c1c511610071578063ded7c1c51461049d578063e78af4ec146104b0578063f0350799146104c35761020b565b8063d46b4aff14610469578063d5ae406c1461047c5761020b565b8063c819325514610410578063ce18b19014610430578063cf17840814610443578063d165c800146104565761020b565b80638f6561af116100f95780638f6561af146103c457806397259d26146103d7578063b63f6580146103ea578063c1f7ea1e146103fd5761020b565b80637dc1e49a1461036b5780637dd1c9621461037e57806380778a4f14610391578063809fdd33146103a45761020b565b80634c93be61116101a25780636394400f116101715780636394400f1461032a5780636d5433e61461033d5780637ae2b5c7146103505780637bdfba4b146103635761020b565b80634c93be61146102e95780635001f3b5146102fc57806351894bf6146103045780635b827a5d146103175761020b565b80632953a626116101de5780632953a626146102995780634000e4f6146102ac578063437348e7146102c15780634437e178146102d45761020b565b80630d261665146102105780631491ac011461023957806319045a25146102595780631e4e4bad14610279575b600080fd5b61022361021e3660046116d3565b6104d6565b6040516102309190611c7b565b60405180910390f35b61024c6102473660046116b5565b610518565b6040516102309190611c89565b61026c61026736600461165f565b610537565b6040516102309190611bb0565b61028c610287366004611607565b610564565b6040516102309190611c97565b61024c6102a7366004611781565b61056f565b6102bf6102ba366004611625565b61058f565b005b6102236102cf366004611703565b61059d565b6102dc6105c8565b6040516102309190611bbe565b6102bf6102f736600461159d565b61068a565b6102dc6106d2565b61024c610312366004611751565b6106e1565b6102dc61032536600461180b565b61070f565b6102dc610338366004611625565b610724565b6102dc61034b366004611625565b610730565b6102dc61035e366004611625565b61073c565b6102dc610748565b6102dc610379366004611607565b610779565b61022361038c366004611703565b610784565b61022361039f3660046116d3565b6107af565b6103b76103b2366004611607565b6107e8565b6040516102309190611ca5565b6102dc6103d2366004611625565b6107f3565b6102dc6103e536600461180b565b6107ff565b61024c6103f8366004611751565b61080c565b61024c61040b3660046116b5565b61083a565b61042361041e366004611607565b610859565b6040516102309190611cce565b6102dc61043e366004611625565b610864565b610223610451366004611703565b610870565b61024c610464366004611781565b61089b565b6102236104773660046116b5565b6108bb565b61048f61048a366004611703565b6108da565b604051610230929190611cb3565b6102dc6104ab366004611625565b610901565b6102236104be366004611703565b61090d565b6102dc6104d1366004611607565b610938565b6104de611380565b6104e6611380565b6104f536859003850185611733565b905061050f8161050a368690038601866117b1565b610943565b90505b92915050565b6105206113a7565b61051261053236849003840184611733565b610969565b60006105416113be565b61054d838501856117cf565b905061055985826109a0565b9150505b9392505050565b600061051282610b30565b6105776113a7565b61050f610589368590038501856117b1565b83610b65565b6105998282610c04565b5050565b6105a5611380565b6105ad611380565b6105bc36859003850185611733565b905061050f8184610c08565b600060001960005414156105f75760405162461bcd60e51b81526004016105ee90611c6b565b60405180910390fd5b6000196000819055503073ffffffffffffffffffffffffffffffffffffffff16637bdfba4b6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061068091908101906117ed565b9050600160005590565b6106cc8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250610c42915050565b50505050565b60006106dc610c88565b905090565b6106e96113a7565b61050f6106fb368590038501856117b1565b61070a368590038501856117b1565b610c94565b600061071c848484610cc6565b949350505050565b600061050f8383610ce8565b600061050f8383610d3f565b600061050f8383610d55565b6000600019600054141561076e5760405162461bcd60e51b81526004016105ee90611c6b565b506001600090815590565b600061051282610d64565b61078c611380565b610794611380565b6107a336859003850185611733565b905061050f8184610d78565b6107b7611380565b6107bf611380565b6107ce36859003850185611733565b905061050f816107e3368690038601866117b1565b610dad565b600061051282610dd0565b600061050f8383610e02565b600061071c848484610e2c565b6108146113a7565b61050f610826368590038501856117b1565b610835368590038501856117b1565b610e6d565b6108426113a7565b61051261085436849003840184611733565b610e9a565b600061051282610ec7565b600061050f8383610eed565b610878611380565b610880611380565b61088f36859003850185611733565b905061050f8184610f0b565b6108a36113a7565b61050f6108b5368590038501856117b1565b83610f2e565b6108c3611380565b6105126108d536849003840184611733565b610fbb565b6000806108f56108ef36869003860186611733565b84611011565b915091505b9250929050565b600061050f83836110be565b610915611380565b61091d611380565b61092c36859003850185611733565b905061050f81846110dc565b6000610512826110ff565b805161094e90610b30565b6001600160781b031660608301526020908101511515910152565b6109716113a7565b604051806040016040528083606001516001600160781b03168152602001836020015115158152509050919050565b6040810151600090819060f01c60ff1660038111156109bb57fe5b90506000808260038111156109cc57fe5b14156109d9575083610ac8565b60018260038111156109e757fe5b1415610a52576040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525085604051602001610a35929190611b76565b604051602081830303815290604052805190602001209050610ac8565b6002826003811115610a6057fe5b14610a6757fe5b6040518060400160405280601b81526020017f19457468657265756d205369676e6564204d6573736167653a0a20000000000081525085604051602001610aaf929190611b76565b6040516020818303038152906040528051906020012090505b600181856040015160f81c8660000151876020015160405160008152602001604052604051610afa9493929190611bcc565b6020604051602081039080840390855afa158015610b1c573d6000803e3d6000fd5b5050604051601f1901519695505050505050565b60006f010000000000000000000000000000008210610b615760405162461bcd60e51b81526004016105ee90611c2b565b5090565b610b6d6113a7565b826020015115610baa576040518060400160405280610b9985600001518561110390919063ffffffff16565b815260016020909101529050610512565b8251821115610bd5576040518060400160405280610b9985600001518561112890919063ffffffff16565b6040805180820190915283518190610bf3908563ffffffff61112816565b815260006020909101529392505050565b9055565b610c106113a7565b610c1983610969565b9050610c2b818363ffffffff610f2e16565b9050610c3d838263ffffffff61094316565b505050565b82610c3d5781610c518261116a565b604051602001610c62929190611b98565b60408051601f198184030181529082905262461bcd60e51b82526105ee91600401611c0a565b670de0b6b3a764000090565b610c9c6113a7565b8160200151610cb857610cb3838360000151610b65565b61050f565b61050f838360000151610f2e565b600061071c82610cdc868663ffffffff61127f16565b9063ffffffff6112b916565b6000821580610cf5575081155b15610d0257506000610512565b61050f6001610d33670de0b6b3a7640000610cdc83610d27898963ffffffff61127f16565b9063ffffffff61112816565b9063ffffffff61110316565b6000818311610d4e578161050f565b5090919050565b6000818310610d4e578161050f565b6000610512670de0b6b3a7640000836110be565b610d806113a7565b610d8983610e9a565b9050610d9b818363ffffffff610f2e16565b9050610c3d838263ffffffff610dad16565b8051610db890610b30565b6001600160781b031660408301526020015115159052565b60007001000000000000000000000000000000008210610b615760405162461bcd60e51b81526004016105ee90611c3b565b600061050f82610e2085670de0b6b3a764000063ffffffff6112b916565b9063ffffffff61127f16565b6000831580610e39575082155b15610e5057610e496000836112b9565b905061055d565b61071c6001610d3384610cdc83610d278a8a63ffffffff61127f16565b610e756113a7565b8160200151610e8c57610cb3838360000151610f2e565b61050f838360000151610b65565b610ea26113a7565b50604080518082018252908201516001600160781b0316815290511515602082015290565b60006401000000008210610b615760405162461bcd60e51b81526004016105ee90611c5b565b600061050f670de0b6b3a7640000610cdc858563ffffffff61127f16565b610f136113a7565b610f1c83610969565b9050610c2b818363ffffffff610b6516565b610f366113a7565b8260200151610f72576040518060400160405280610f6185600001518561110390919063ffffffff16565b815260006020909101529050610512565b8251821015610f99576040805180820190915283518190610b99908563ffffffff61112816565b6040518060400160405280610bf385600001518561112890919063ffffffff16565b610fc3611380565b604051806080016040528083600001511515815260200183602001511515815260200183604001516001600160781b0316815260200183606001516001600160781b03168152509050919050565b81516000908190819081901561104d5761104661102c610c88565b60408801516001600160781b03169063ffffffff61127f16565b915061105b565b61105861102c610c88565b90505b606086015160009061107c906001600160781b03168763ffffffff61127f16565b905086602001511561109f57611098838263ffffffff61110316565b92506110b2565b6110af828263ffffffff61110316565b91505b50909590945092505050565b600061050f82610cdc85670de0b6b3a764000063ffffffff61127f16565b6110e46113a7565b6110ed83610e9a565b9050610d9b818363ffffffff610b6516565b5490565b60008282018381101561050f5760405162461bcd60e51b81526004016105ee90611c1b565b600061050f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112fb565b606080763a20307830303030303030302e2e2e303030303030303060481b6040516020016111989190611b61565b60408051601f19818403018152919052905073ffffffffffffffffffffffffffffffffffffffff8316609c601c60045b600c811015611274576111dc84841c611327565b8582815181106111e857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061122284831c611327565b8582600b018151811061123157fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506003199283019291909101906001016111c8565b509295945050505050565b60008261128e57506000610512565b8282028284828161129b57fe5b041461050f5760405162461bcd60e51b81526004016105ee90611c4b565b600061050f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611349565b6000818484111561131f5760405162461bcd60e51b81526004016105ee9190611c0a565b505050900390565b6000600f8216600a811061133c57605761133f565b60305b0160f81b92915050565b6000818361136a5760405162461bcd60e51b81526004016105ee9190611c0a565b50600083858161137657fe5b0495945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b803561051281611ddb565b803561051281611df2565b803561051281611dfb565b803561051281611e04565b60008083601f84011261141c57600080fd5b50813567ffffffffffffffff81111561143457600080fd5b6020830191508360018202830111156108fa57600080fd5b60006080828403121561145e57600080fd5b50919050565b60006080828403121561147657600080fd5b6114806080611cdc565b9050600061148e84846113e9565b825250602061149f848483016113e9565b60208301525060406114b384828501611587565b60408301525060606114c784828501611587565b60608301525092915050565b60006040828403121561145e57600080fd5b6000604082840312156114f757600080fd5b6115016040611cdc565b9050600061150f84846113ff565b8252506020611520848483016113e9565b60208301525092915050565b60006060828403121561153e57600080fd5b6115486060611cdc565b9050600061155684846113ff565b8252506020611567848483016113ff565b602083015250604061157b848285016113f4565b60408301525092915050565b803561051281611e0d565b805161051281611e04565b600080600080606085870312156115b357600080fd5b60006115bf87876113e9565b945050602085013567ffffffffffffffff8111156115dc57600080fd5b6115e88782880161140a565b935093505060406115fb878288016113de565b91505092959194509250565b60006020828403121561161957600080fd5b600061071c84846113ff565b6000806040838503121561163857600080fd5b600061164485856113ff565b9250506020611655858286016113ff565b9150509250929050565b60008060006040848603121561167457600080fd5b600061168086866113ff565b935050602084013567ffffffffffffffff81111561169d57600080fd5b6116a98682870161140a565b92509250509250925092565b6000608082840312156116c757600080fd5b600061071c848461144c565b60008060c083850312156116e657600080fd5b60006116f2858561144c565b9250506080611655858286016114d3565b60008060a0838503121561171657600080fd5b6000611722858561144c565b9250506080611655858286016113ff565b60006080828403121561174557600080fd5b600061071c8484611464565b6000806080838503121561176457600080fd5b600061177085856114d3565b9250506040611655858286016114d3565b6000806060838503121561179457600080fd5b60006117a085856114d3565b9250506040611655858286016113ff565b6000604082840312156117c357600080fd5b600061071c84846114e5565b6000606082840312156117e157600080fd5b600061071c848461152c565b6000602082840312156117ff57600080fd5b600061071c8484611592565b60008060006060848603121561182057600080fd5b600061182c86866113ff565b935050602061183d868287016113ff565b925050604061184e868287016113ff565b9150509250925092565b61186181611d15565b82525050565b61186181611d20565b61186161187c82611d4a565b611d59565b61186181611d59565b61186161187c82611d59565b60006118a182611d03565b6118ab8185611d07565b93506118bb818560208601611da5565b9290920192915050565b60006118d082611d03565b6118da8185611d0c565b93506118ea818560208601611da5565b6118f381611dd1565b9093019392505050565b600061190a601b83611d0c565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000611943602783611d0c565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203181527f3230206269747300000000000000000000000000000000000000000000000000602082015260400192915050565b60006119a2602783611d0c565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203181527f3238206269747300000000000000000000000000000000000000000000000000602082015260400192915050565b6000611a01602183611d0c565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611a44602683611d0c565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203381527f3220626974730000000000000000000000000000000000000000000000000000602082015260400192915050565b6000611aa3601f83611d0c565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815260200192915050565b80516080830190611ae08482611867565b506020820151611af36020850182611867565b506040820151611b066040850182611b3d565b5060608201516106cc6060850182611b3d565b80516040830190611b2a8482611881565b5060208201516106cc6020850182611867565b61186181611d5c565b61186181611d68565b61186181611d96565b61186181611d9f565b6000611b6d8284611870565b50601701919050565b6000611b828285611896565b9150611b8e828461188a565b5060200192915050565b6000611ba48285611896565b915061071c8284611896565b602081016105128284611858565b602081016105128284611881565b60808101611bda8287611881565b611be76020830186611b58565b611bf46040830185611881565b611c016060830184611881565b95945050505050565b6020808252810161050f81846118c5565b60208082528101610512816118fd565b6020808252810161051281611936565b6020808252810161051281611995565b60208082528101610512816119f4565b6020808252810161051281611a37565b6020808252810161051281611a96565b608081016105128284611acf565b604081016105128284611b19565b602081016105128284611b3d565b602081016105128284611b46565b60408101611cc18285611881565b61055d6020830184611881565b602081016105128284611b4f565b60405181810167ffffffffffffffff81118282101715611cfb57600080fd5b604052919050565b5190565b919050565b90815260200190565b600061051282611d7d565b151590565b7fffff0000000000000000000000000000000000000000000000000000000000001690565b68ffffffffffffffffff191690565b90565b6001600160781b031690565b6fffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b63ffffffff1690565b60ff1690565b60005b83811015611dc0578181015183820152602001611da8565b838111156106cc5750506000910152565b601f01601f191690565b611de481611d15565b8114611def57600080fd5b50565b611de481611d20565b611de481611d25565b611de481611d59565b611de481611d5c56fea365627a7a7231582017aab10dcc9e4118032d0c19f9e4fe21d46140de8923787fa1bbd8eb52f743006c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "author": "axor",
    "methods": {},
    "title": "Test_Lib"
  },
  "userdoc": {
    "methods": {},
    "notice": "Exposes library functions for testing."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1537,
        "contract": "contracts/test/Test_Lib.sol:Test_Lib",
        "label": "_STATUS_",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}