{
  "address": "0x2FAFBa17A2801E1FE093A0C63f6f549EB974CDd5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reader",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "adjustmentExponent",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_ADJUSTMENT_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_MAPPING_",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_ORACLE_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_READER_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbfc5043988ea1451d746d1c9852cc939a49b70d7d96eec2b1229f3cb1832212e",
  "receipt": {
    "to": null,
    "from": "0xC17278db94dc180d8B7680656cBe3051517ae6e8",
    "contractAddress": "0x2FAFBa17A2801E1FE093A0C63f6f549EB974CDd5",
    "transactionIndex": 2,
    "gasUsed": "483909",
    "logsBloom": "0x
    "blockHash": "0xf28b1718a9c38c0221d5f0255d08bb2d55e781243df9dc5037be2f530e80d4dd",
    "transactionHash": "0xbfc5043988ea1451d746d1c9852cc939a49b70d7d96eec2b1229f3cb1832212e",
    "logs": [],
    "blockNumber": 36899925,
    "cumulativeGasUsed": "757782",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x56a43EB56Da12C0dc1D972ACb089c06a5dEF8e69",
    "0x16D57534E40a44EbBF73B270D7C95b0a0e43f615",
    16
  ],
  "numDeployments": 2,
  "solcInputHash": "638c89ae9bbcccd3b2c9594585590c46",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reader\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"adjustmentExponent\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"_ADJUSTMENT_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_MAPPING_\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_ORACLE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_READER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"axor\",\"methods\":{\"getPrice()\":{\"return\":\"The adjusted price as a fixed-point number with 18 decimals.\"}},\"title\":\"P1ChainlinkOracle\"},\"userdoc\":{\"methods\":{\"getPrice()\":{\"notice\":\"Returns the oracle price from the aggregator.\"}},\"notice\":\"P1Oracle that reads the price from a Chainlink aggregator.\"}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/v1/oracles/P1ChainlinkOracle.sol\":\"P1ChainlinkOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"contracts/external/chainlink/I_Aggregator.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title I_Aggregator\\n * @author axor\\n *\\n * Partial interface for a Chainlink Aggregator.\\n */\\ninterface I_Aggregator {\\n\\n    // ============ Getter Functions ============\\n\\n    /**\\n     * @notice Get the most recent answer from the aggregator.\\n     * @dev Warning: Will return 0 if no answer has been reached.\\n     */\\n    function latestAnswer()\\n        external\\n        view\\n        returns (int256);\\n}\\n\",\"keccak256\":\"0x6dbf491dfd52b0d95e5cc34efc0a3bd7ae2db2f0a64cc6cfbc20a770aefebfb4\"},\"contracts/protocol/lib/BaseMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title BaseMath\\n * @author axor\\n *\\n * @dev Arithmetic for fixed-point numbers with 18 decimals of precision.\\n */\\nlibrary BaseMath {\\n    using SafeMath for uint256;\\n\\n    // The number One in the BaseMath system.\\n    uint256 constant internal BASE = 10 ** 18;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function base()\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return BASE;\\n    }\\n\\n    /**\\n     * @dev Multiplies a value by a base value (result is rounded down).\\n     */\\n    function baseMul(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return value.mul(baseValue).div(BASE);\\n    }\\n\\n    /**\\n     * @dev Multiplies a value by a base value (result is rounded down).\\n     *  Intended as an alternaltive to baseMul to prevent overflow, when `value` is known\\n     *  to be divisible by `BASE`.\\n     */\\n    function baseDivMul(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return value.div(BASE).mul(baseValue);\\n    }\\n\\n    /**\\n     * @dev Multiplies a value by a base value (result is rounded up).\\n     */\\n    function baseMulRoundUp(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (value == 0 || baseValue == 0) {\\n            return 0;\\n        }\\n        return value.mul(baseValue).sub(1).div(BASE).add(1);\\n    }\\n\\n    /**\\n     * @dev Divide a value by a base value (result is rounded down).\\n     */\\n    function baseDiv(\\n        uint256 value,\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return value.mul(BASE).div(baseValue);\\n    }\\n\\n    /**\\n     * @dev Returns a base value representing the reciprocal of another base value (result is\\n     *  rounded down).\\n     */\\n    function baseReciprocal(\\n        uint256 baseValue\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return baseDiv(BASE, baseValue);\\n    }\\n}\\n\",\"keccak256\":\"0x67144b777ef4e8feaa770a74ea879ead4e3d94da4cfdc795440033fbc9e6397a\"},\"contracts/protocol/v1/intf/I_P1Oracle.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title I_P1Oracle\\n * @author axor\\n *\\n * @notice Interface that PerpetualV1 Price Oracles must implement.\\n */\\ninterface I_P1Oracle {\\n\\n    /**\\n     * @notice Returns the price of the underlying asset relative to the margin token.\\n     *\\n     * @return The price as a fixed-point number with 18 decimals.\\n     */\\n    function getPrice()\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xc5b4c8b57eb0b7156086eaa8ed394f72bbfa2e879ac805096a7b6cf6799b43ef\"},\"contracts/protocol/v1/oracles/P1ChainlinkOracle.sol\":{\"content\":\"/*\\n\\n    Copyright 2024 Axor DAO\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { I_Aggregator } from \\\"../../../external/chainlink/I_Aggregator.sol\\\";\\nimport { BaseMath } from \\\"../../lib/BaseMath.sol\\\";\\nimport { I_P1Oracle } from \\\"../intf/I_P1Oracle.sol\\\";\\n\\n\\n/**\\n * @title P1ChainlinkOracle\\n * @author axor\\n *\\n * @notice P1Oracle that reads the price from a Chainlink aggregator.\\n */\\ncontract P1ChainlinkOracle is\\n    I_P1Oracle\\n{\\n    using BaseMath for uint256;\\n\\n    // ============ Storage ============\\n\\n    // The underlying aggregator to get the price from.\\n    address public _ORACLE_;\\n\\n    // The address with permission to read the oracle price.\\n    address public _READER_;\\n\\n    // A constant factor to adjust the price by, as a fixed-point number with 18 decimal places.\\n    uint256 public _ADJUSTMENT_;\\n\\n    // Compact storage for the above parameters.\\n    mapping (address => bytes32) public _MAPPING_;\\n\\n    // ============ Constructor ============\\n\\n    constructor(\\n        address oracle,\\n        address reader,\\n        uint96 adjustmentExponent\\n    )\\n        public\\n    {\\n        _ORACLE_ = oracle;\\n        _READER_ = reader;\\n        _ADJUSTMENT_ = 10 ** uint256(adjustmentExponent);\\n\\n        bytes32 oracleAndAdjustment =\\n            bytes32(bytes20(oracle)) |\\n            bytes32(uint256(adjustmentExponent));\\n        _MAPPING_[reader] = oracleAndAdjustment;\\n    }\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * @notice Returns the oracle price from the aggregator.\\n     *\\n     * @return The adjusted price as a fixed-point number with 18 decimals.\\n     */\\n    function getPrice()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        bytes32 oracleAndExponent = _MAPPING_[msg.sender];\\n        require(\\n            oracleAndExponent != bytes32(0),\\n            \\\"P1ChainlinkOracle: Sender not authorized to get price\\\"\\n        );\\n        (address oracle, uint256 adjustment) = getOracleAndAdjustment(oracleAndExponent);\\n        int256 answer = I_Aggregator(oracle).latestAnswer();\\n        require(\\n            answer > 0,\\n            \\\"P1ChainlinkOracle: Invalid answer from aggregator\\\"\\n        );\\n        uint256 rawPrice = uint256(answer);\\n        return rawPrice.baseMul(adjustment);\\n    }\\n\\n    function getOracleAndAdjustment(\\n        bytes32 oracleAndExponent\\n    )\\n        private\\n        pure\\n        returns (address, uint256)\\n    {\\n        address oracle = address(bytes20(oracleAndExponent));\\n        uint256 exponent = uint256(uint96(uint256(oracleAndExponent)));\\n        return (oracle, 10 ** exponent);\\n    }\\n}\\n\",\"keccak256\":\"0x25d6986c332e83b50a50935aa38e969e344736701c6165f6ec77807f29a7305a\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161070238038061070283398101604081905261002f916100b2565b600080546001600160a01b03199081166001600160a01b0386811691909117835560018054909216941693841790556001600160601b0391909116600a81900a60025591815260036020526040902060609290921b6001600160601b03191617905561013c565b80516100a18161011c565b92915050565b80516100a181610133565b6000806000606084860312156100c757600080fd5b60006100d38686610096565b93505060206100e486828701610096565b92505060406100f5868287016100a7565b9150509250925092565b60006001600160a01b0382166100a1565b6001600160601b031690565b610125816100ff565b811461013057600080fd5b50565b61012581610110565b6105b78061014b6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063939a543911610050578063939a54391461009257806398d5fdca146100a7578063c1f75961146100af57610067565b806367b141ee1461006c57806373a2ab7c1461008a575b600080fd5b6100746100c2565b6040516100819190610496565b60405180910390f35b6100746100d1565b61009a6100e0565b60405161008191906104a4565b61009a6100e6565b61009a6100bd366004610301565b6101dc565b6001546001600160a01b031681565b6000546001600160a01b031681565b60025481565b336000908152600360205260408120548061011c5760405162461bcd60e51b8152600401610113906104c3565b60405180910390fd5b600080610128836101ee565b915091506000826001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561016757600080fd5b505afa15801561017b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061019f9190810190610327565b9050600081136101c15760405162461bcd60e51b8152600401610113906104e3565b806101d2818463ffffffff61020a16565b9550505050505090565b60036020526000908152604090205481565b606081901c6bffffffffffffffffffffffff8216600a0a915091565b6000610234670de0b6b3a7640000610228858563ffffffff61023d16565b9063ffffffff61027716565b90505b92915050565b60008261024c57506000610237565b8282028284828161025957fe5b04146102345760405162461bcd60e51b8152600401610113906104d3565b600061023483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836102d55760405162461bcd60e51b815260040161011391906104b2565b5060008385816102e157fe5b0495945050505050565b803561023781610554565b80516102378161056b565b60006020828403121561031357600080fd5b600061031f84846102eb565b949350505050565b60006020828403121561033957600080fd5b600061031f84846102f6565b61034e81610500565b82525050565b61034e8161050b565b6000610368826104f3565b61037281856104f7565b935061038281856020860161051a565b61038b8161054a565b9093019392505050565b60006103a26035836104f7565b7f5031436861696e6c696e6b4f7261636c653a2053656e646572206e6f7420617581527f74686f72697a656420746f206765742070726963650000000000000000000000602082015260400192915050565b60006104016021836104f7565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006104446031836104f7565b7f5031436861696e6c696e6b4f7261636c653a20496e76616c696420616e73776581527f722066726f6d2061676772656761746f72000000000000000000000000000000602082015260400192915050565b602081016102378284610345565b602081016102378284610354565b60208082528101610234818461035d565b6020808252810161023781610395565b60208082528101610237816103f4565b6020808252810161023781610437565b5190565b90815260200190565b60006102378261050e565b90565b6001600160a01b031690565b60005b8381101561053557818101518382015260200161051d565b83811115610544576000848401525b50505050565b601f01601f191690565b61055d81610500565b811461056857600080fd5b50565b61055d8161050b56fea365627a7a72315820b27c26e58326162ef06aea3bfe4a9066807b75ad4ef990b9ad408051422530ab6c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063939a543911610050578063939a54391461009257806398d5fdca146100a7578063c1f75961146100af57610067565b806367b141ee1461006c57806373a2ab7c1461008a575b600080fd5b6100746100c2565b6040516100819190610496565b60405180910390f35b6100746100d1565b61009a6100e0565b60405161008191906104a4565b61009a6100e6565b61009a6100bd366004610301565b6101dc565b6001546001600160a01b031681565b6000546001600160a01b031681565b60025481565b336000908152600360205260408120548061011c5760405162461bcd60e51b8152600401610113906104c3565b60405180910390fd5b600080610128836101ee565b915091506000826001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561016757600080fd5b505afa15801561017b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061019f9190810190610327565b9050600081136101c15760405162461bcd60e51b8152600401610113906104e3565b806101d2818463ffffffff61020a16565b9550505050505090565b60036020526000908152604090205481565b606081901c6bffffffffffffffffffffffff8216600a0a915091565b6000610234670de0b6b3a7640000610228858563ffffffff61023d16565b9063ffffffff61027716565b90505b92915050565b60008261024c57506000610237565b8282028284828161025957fe5b04146102345760405162461bcd60e51b8152600401610113906104d3565b600061023483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836102d55760405162461bcd60e51b815260040161011391906104b2565b5060008385816102e157fe5b0495945050505050565b803561023781610554565b80516102378161056b565b60006020828403121561031357600080fd5b600061031f84846102eb565b949350505050565b60006020828403121561033957600080fd5b600061031f84846102f6565b61034e81610500565b82525050565b61034e8161050b565b6000610368826104f3565b61037281856104f7565b935061038281856020860161051a565b61038b8161054a565b9093019392505050565b60006103a26035836104f7565b7f5031436861696e6c696e6b4f7261636c653a2053656e646572206e6f7420617581527f74686f72697a656420746f206765742070726963650000000000000000000000602082015260400192915050565b60006104016021836104f7565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006104446031836104f7565b7f5031436861696e6c696e6b4f7261636c653a20496e76616c696420616e73776581527f722066726f6d2061676772656761746f72000000000000000000000000000000602082015260400192915050565b602081016102378284610345565b602081016102378284610354565b60208082528101610234818461035d565b6020808252810161023781610395565b60208082528101610237816103f4565b6020808252810161023781610437565b5190565b90815260200190565b60006102378261050e565b90565b6001600160a01b031690565b60005b8381101561053557818101518382015260200161051d565b83811115610544576000848401525b50505050565b601f01601f191690565b61055d81610500565b811461056857600080fd5b50565b61055d8161050b56fea365627a7a72315820b27c26e58326162ef06aea3bfe4a9066807b75ad4ef990b9ad408051422530ab6c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "author": "axor",
    "methods": {
      "getPrice()": {
        "return": "The adjusted price as a fixed-point number with 18 decimals."
      }
    },
    "title": "P1ChainlinkOracle"
  },
  "userdoc": {
    "methods": {
      "getPrice()": {
        "notice": "Returns the oracle price from the aggregator."
      }
    },
    "notice": "P1Oracle that reads the price from a Chainlink aggregator."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5344,
        "contract": "contracts/protocol/v1/oracles/P1ChainlinkOracle.sol:P1ChainlinkOracle",
        "label": "_ORACLE_",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5346,
        "contract": "contracts/protocol/v1/oracles/P1ChainlinkOracle.sol:P1ChainlinkOracle",
        "label": "_READER_",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5348,
        "contract": "contracts/protocol/v1/oracles/P1ChainlinkOracle.sol:P1ChainlinkOracle",
        "label": "_ADJUSTMENT_",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5352,
        "contract": "contracts/protocol/v1/oracles/P1ChainlinkOracle.sol:P1ChainlinkOracle",
        "label": "_MAPPING_",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}